/// <reference types="rx/ts/core/disposables/disposable" />
/// <reference types="rx/ts/core/observer-lite" />
declare module Rx {
    module internals {
        /**
        * Abstract base class for implementations of the Observer class.
        * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
        */
        export interface AbstractObserver<T> extends Rx.IObserver<T>, Rx.IDisposable {
            /**
            * Notifies the observer of a new element in the sequence.
            * @param {Any} value Next element in the sequence.
            */
            onNext(value: T): void;
            /**
            * Notifies the observer that an exception has occurred.
            * @param {Any} error The error that has occurred.
            */
            onError(exception: any): void;
            /**
            * Notifies the observer of the end of the sequence.
            */
            onCompleted(): void;
            isStopped: boolean;
            /**
            * Disposes the observer, causing it to transition to the stopped state.
            */
            dispose(): void;
            fail(e: any): boolean;
            next(value: T): void;
            error(error: any): void;
            completed(): void;
        }
        interface AbstractObserverStatic {
            new <T>(): AbstractObserver<T>;
        }
        export var AbstractObserver: AbstractObserverStatic;
        export {};
    }
}
